<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sn_aia_tool">
    <sn_aia_tool action="INSERT_OR_UPDATE">
        <active>true</active>
        <description>Create a record in u_compliance_research_request</description>
        <input_schema>[{"name":"short_description","description":"a description of the record","mandatory":false},{"name":"decription","description":"A description","mandatory":false},{"name":"state","description":"state of the record","mandatory":false},{"name":"priority","description":"priority of the record","mandatory":false},{"name":"due_date","description":"a due date on the record","mandatory":false},{"name":"crudInputs","description":"CRUD Input Variables. These are already pre-defined. Under no circumstances should you prompt the user for this information or attempt to change these values."}]</input_schema>
        <name>AI Compliant Deep Research record creater</name>
        <record_type>custom</record_type>
        <script><![CDATA[(function (inputs) {
    function getChoiceList(tableName, fieldName) {
        var choices = GlideChoiceList.getChoiceList(tableName, fieldName);
        if (!choices) return [];

        var choicesArray = [];
        for (var i = 0; i < choices.getSize(); i++) {
            choicesArray.push({
                value: choices.getChoice(i).getValue(),
                label: choices.getChoice(i).getLabel(),
            });
        }
        return choicesArray;
    }

    // parses {{value}} and obtains the correct value for a choice or reference field.
    function parseValue(table, value, field, inputs) {
        if (!value || typeof value === 'object') return '';
        // regex to parse {{var}} and check if the inputs contain that prop
        var fieldValue = value.replace(
            /{{\s*(\w+)\s*}}/g,
            function (match, variableName) {
                if (inputs && inputs.hasOwnProperty(variableName)) {
                    return inputs[variableName];
                }
                return '';
            }
        );
        if (!fieldValue) return field.type === 'string' ? '' : null;
        if (field.type === 'choice') {
            var choices = getChoiceList(table, field.id);
            for (var i = 0; i < choices.length; i++) {
                if (
                    choices[i].value == fieldValue ||
                    choices[i].label
                        .toLowerCase()
                        .includes(fieldValue.toLowerCase())
                ) {
                    return choices[i].value;
                }
            }
            // Neither value nor label matched
            gs.error(
                '[AIA AGENTS MSG] Invalid choice field value or label: {0}',
                fieldValue
            );
        } else if (field.referenceTable) {
            // First check if the input is a valid sys_id
            var refGr = new GlideRecordSecure(field.referenceTable);
            refGr.addQuery('sys_id', fieldValue);
            refGr.query();
            if (refGr.getRowCount() === 1) {
                return fieldValue; // User input is a valid sys_id
            }

            if (field.referenceTableDefaultField) {
                // If not, try to find a record with matching display value
                var refName = field.referenceTableDefaultField;
                refGr = new GlideRecordSecure(field.referenceTable);

                // Check for both exact match and display value containing the input
                var qr = refGr.addQuery(refName, fieldValue);
                qr.addOrCondition(refName, 'CONTAINS', fieldValue);
                refGr.setLimit(1);
                refGr.query();

                if (refGr.next()) {
                    return refGr.getUniqueValue(); // Return the sys_id
                }
            }
            // No match found
            gs.error(
                '[AIA AGENTS MSG] Invalid reference field value or label: {0}',
                fieldValue
            );
        }
        return fieldValue;
    }

    var table = inputs.crudInputs.table.value;
    var tableName = inputs.crudInputs.table.displayValue;
    var fieldValues = inputs.crudInputs.fieldValues
        ? inputs.crudInputs.fieldValues
        : [];
    // each field is passed as an {id, label} obj to be displayed when editing the tool
    // each value is not passed directly, but in an object containing the fieldValue prop
    fieldValues = fieldValues.map(function (item) {
        var fieldValue = item.value ? item.value.fieldValue : '';
        return {
            field: item.field.id,
            value: parseValue(table, fieldValue, item.field, inputs),
        };
    });

    var gr = new GlideRecordSecure(table);
    if (gr.canCreate()) {
        gr.initialize();
        fieldValues.forEach(function (item) {
            if (gr.isValidField(item.field)) {
                gr.setValue(item.field, item.value);
            }
        });
    } else {
        return {
            output: sn_i18n.Message.getMessage(
                'sn_aia',
                'Cannot create record due to security constraints.'
            ),
            status: sn_i18n.Message.getMessage('sn_aia', 'error'),
        };
    }
    var sysId = gr.insert();

    if (!sysId) {
        gs.error('[AIA AGENTS MSG] Failed to insert the record.');
        return {
            output: sn_i18n.Message.getMessage(
                'sn_aia',
                'Failed to insert the record'
            ),
            status: sn_i18n.Message.getMessage('sn_aia', 'error'),
        };
    }
    return {
        sysId: sysId,
        message: sn_i18n.Message.getMessage(
            'sn_aia',
            'Record successfully inserted into the {table} table.',
            {
                table: tableName,
            }
        ),
        status: sn_i18n.Message.getMessage('sn_aia', 'success'),
    };
})(inputs);
]]></script>
        <sys_class_name>sn_aia_tool</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-10-14 23:51:46</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_id>87d09a5a2f24f61065b8d94fafa4e3ab</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>AI Compliant Deep Research record creater</sys_name>
        <sys_overrides/>
        <sys_package display_value="AI Compliant Deep Research app" source="3da22a002f607a1065b8d94fafa4e359">3da22a002f607a1065b8d94fafa4e359</sys_package>
        <sys_policy/>
        <sys_scope display_value="AI Compliant Deep Research app">3da22a002f607a1065b8d94fafa4e359</sys_scope>
        <sys_update_name>sn_aia_tool_87d09a5a2f24f61065b8d94fafa4e3ab</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-10-14 23:51:46</sys_updated_on>
        <target_document/>
        <target_document_table>sn_aia_tool</target_document_table>
        <type>crud</type>
    </sn_aia_tool>
</record_update>
